#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

#include <input/processors.dtsi>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 20 1>;
   };

    &mmv {
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        time-to-max-speed-ms = <300>;
        acceleration-exponent = <1>;
    };

*/

&msc_input_listener {
    input-processors = <&zip_xy_scaler 200 1>;
};
&msc {
    x-input-code = <INPUT_REL_HWHEEL>;
    y-input-code = <INPUT_REL_WHEEL>;
    time-to-max-speed-ms = <300>;
    acceleration-exponent = <0>;
};

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 200    // 10

#define MO_TOG(layer_mo, layer_tog) &mo_tog layer_mo layer_tog   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer
#define TD_DC(single_click, double_click) &td_dc single_click double_click   // Macro to apply tap dance

/ {
    combos {
        compatible = "zmk,combos";
        combo_pp {
            timeout-ms = <50>;
            key-positions = <15 16>;
            layers = <3>;
            bindings = <&kp C_PP>;
        };
        combo_mute {
            timeout-ms = <50>;
            key-positions = <16 17>;
            layers = <3>;
            bindings = <&kp C_MUTE>;
        };
    };
    behaviors {
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };
        mt: mod_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <500>;
            bindings = <&kp>, <&kp>;
            display-name = "Mod-Tap";
        };
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            //hold-trigger-key-positions = < ... >; // List of keys on the right side of the keyboard
            hold-trigger-on-release;
        };
        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            //hold-trigger-key-positions = < ... >; // List of keys on the left side of the keyboard
            hold-trigger-on-release;
        };
        td_dc: td_double_click {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Double click Tap Dance";ns
            #binding-cells = <0>;
            bindings = <&kp>, <&kp>;
        };
        td_d: td_double_tap {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Double click Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp CAPS>, <&PSCRN>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        alpha_layer {
            display-name = "ABC";
            bindings = <
&kp ESC     &td_d               &kp Y         &kp U          &kp Z         &kp FSLH                                 &kp UP                  TD_DC(SQT, DQT)    &kp H         &kp D         &kp G         &kp Q         &kp J
&kp X       &hml LCTRL A        &hml LSHFT E  &hml LALT I    &hml LGUI O   TD_DC(COMMA, SEMI)               &kp LEFT  &kp ENTER  &kp RIGHT  TD_DC(DOT, COLON)  &hmr RGUI R   &hmr LALT S   &hmr RSHFT T  &hmr RCTRL N  &kp P
&lt 1 LGUI  &hml LGUI W         &hml LALT V   &hml LSHFT F   &hml LCTRL C  TD_DC(LPAR, LBRC)  &kp SPACE               &kp DOWN              TD_DC(RPAR, RBRC)  &hmr RCTRL L  &hmr RSHFT K  &hmr LALT M   &hmr RGUI B   &kp DEL
                                                &lt 4 TAB  MO_TOG(2, 1)  &lt 3 SPACE                                                                      &lt 4 ENTER  MO_TOG(1, 1)  &lt 3 BSPC
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        nav_layer {
            display-name = "NAV";
            bindings = <
&trans     &trans           &kp LC(Y)        &kp LA(F4)        &kp LC(Z)         &trans                              &mmv MOVE_UP                &kp ASTRK  &kp N7         &kp N8         &kp N9         &kp PLUS         &kp LC(S)
&kp LC(X)  &kp LEFT         &kp DOWN         &kp UP            &kp RIGHT         &trans              &mmv MOVE_LEFT  &mkp LCLK  &mmv MOVE_RIGHT  &trans     &hmr RGUI N1   &hmr LALT N2   &hmr RSHFT N3  &hmr RCTRL N0    &kp EQUAL
&trans     &hml LGUI LC(W)  &hml LALT LC(V)  &hml LSHFT LC(F)  &hml LCTRL LC(C)  &trans  &kp C_MUTE                  &mmv MOVE_DOWN              &trans     &hmr RCTRL N4  &hmr RSHFT N5  &hmr LALT N6   &hmr RGUI MINUS  &trans
                                        &trans           &trans           &trans                                                                         &trans           &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        symbol_layer {
            display-name = "SYMBOL";
            bindings = <
&trans    &kp HASH   &kp LT     &kp GT     &kp AMPS   &kp PERCENT                        &mmv MOVE_UP                  &trans           &kp KP_N7         &kp KP_N8         &kp KP_N9         &none             &none
&kp EXCL  &kp UNDER  &kp MINUS  &kp PLUS   &kp EQUAL  &kp DOLLAR         &mmv MOVE_LEFT  &mkp LCLK  &mmv MOVE_RIGHT    &trans           &hmr RGUI KP_N1   &hmr LALT KP_N2   &hmr RSHFT KP_N3  &hmr RCTRL KP_N0  &kp CARET
&trans    &kp QMARK  &kp FSLH   &kp ASTRK  &kp PIPE   TD_DC(LBKT, LBRC)   &kp C_MUTE     &mmv MOVE_DOWN                TD_DC(RBKT, RBRC)  &hmr RCTRL KP_N4  &hmr RSHFT KP_N5  &hmr LALT KP_N6   &hmr RGUI TILDE   &trans
                              &trans     &trans  &trans                                                                    &trans     &trans    &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        media_layer {
            display-name = "MEDIA";
            bindings = <
&trans        &rgb_ug RGB_TOG                 &rgb_ug RGB_BRI  &kp C_BRI_UP  &kp C_VOLUME_UP    &bt BT_SEL 0                                &mmv MOVE_UP                     &bl BL_INC  &none     &rgb_ug RGB_EFF  &none      &none    &bt BT_CLR_ALL
&bt BT_SEL 4  &kp C_PREV                      &kp C_RW         &kp C_FF      &kp C_NEXT         &bt BT_SEL 1                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &bl BL_TOG  &kp HOME  &kp PG_UP        &kp PG_DN  &kp END  &bt BT_CLR
&bt BT_SEL 3  &rgb_ug RGB_COLOR_HSB(0,0,10)   &rgb_ug RGB_BRD  &kp C_BRI_DN  &kp C_VOLUME_DOWN  &bt BT_SEL 2 &kp C_MUTE                     &mmv MOVE_DOWN                   &bl BL_DEC  &kp INS   &rgb_ug RGB_EFR  &none      &none    &trans
                                          &trans        &trans             &trans                                                                             &trans &trans &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        mouse_layer {
            display-name = "MOUSE";
            bindings = <
&studio_unlock  &kp F2          &kp F3          &kp F4        &kp F5           &kp F6                               &mmv MOVE_UP                     &none  &mkp LCLK       &mkp MCLK     &mkp RCLK       &none            &sys_reset
&kp F1          &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &kp F7               &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &none  &mmv MOVE_LEFT  &mmv MOVE_UP  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none
&bootloader     &kp F9          &kp F10         &kp F11       &kp F12          &kp F8  &kp C_MUTE                   &mmv MOVE_DOWN                   &none  &msc SCRL_LEFT  &msc SCRL_UP  &msc SCRL_DOWN  &msc SCRL_RIGHT  &bootloader        
                                                &trans        &trans           &trans                                                                &trans &trans &kp DEL
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};
