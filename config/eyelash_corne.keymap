#define ZMK_POINTING_DEFAULT_MOVE_VAL 600  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 200  // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>


&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 1 16>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <0>;     // 300
    delay-ms = <0>;                  // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};


#define MO_TOG(layer_mo, layer_tog) &mo_tog layer_mo layer_tog   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer
#define MO_TO(layer_mo, layer_to) &mo_to layer_mo layer_to   // Macro to apply momentary-layer-on-hold/to-layer-on-tap to a specific layer
// #define TD_HML(mod_key, key_press) &td_hml mod_key key_press key_press   // Macro to apply momentary-layer-on-hold/to-layer-on-tap to a specific layer
// #define TD_DC(single_tap, double_tap) &td_dc single_tap double_tap   // Macro to apply tap dance

/ {
    combos {
        compatible = "zmk,combos";
        combo_ctrl_w_left {
            timeout-ms = <50>;
            key-positions = <0 1>;
            layers = <0 1>;
            bindings = <&kp LC(W)>;
        };
        combo_bspc {
            timeout-ms = <50>;
            key-positions = <2 3>;
            layers = <0 1>;
            bindings = <&kp BSPC>;
        };
        combo_del {
            timeout-ms = <50>;
            key-positions = <3 4>;
            layers = <0 1>;
            bindings = <&kp DEL>;
        };
        combo_enter {
            timeout-ms = <50>;
            key-positions = <2 3 4>;
            layers = <0 1>;
            bindings = <&kp ENTER>;
        };
        combo_alt_f4 {
            timeout-ms = <50>;
            key-positions = <4 5>;
            layers = <0 1>;
            bindings = <&kp LA(F4)>;
        };
        combo_ctrl_w_right {
            timeout-ms = <50>;
            key-positions = <7 8>;
            layers = <0 1>;
            bindings = <&kp LC(W)>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <8 9>;
            layers = <0 1>;
            bindings = <&kp TAB>;
        };
        combo_space {
            timeout-ms = <50>;
            key-positions = <9 10>;
            layers = <0 1>;
            bindings = <&kp SPACE>;
        };
        combo_esc {
            timeout-ms = <50>;
            key-positions = <8 9 10>;
            layers = <0 1>;
            bindings = <&kp ESC>;
        };
        combo_num_layer {
            timeout-ms = <50>;
            key-positions = <8 9 10 11>;
            layers = <0 1>;
            bindings = <&to 5>;
        };
        combo_num_lock {
            timeout-ms = <50>;
            key-positions = <8 9 10>;
            layers = <5>;
            bindings = <&kp KP_NUM>;
        };
        combo_bt_clr {
            timeout-ms = <50>;
            key-positions = <10 11>;
            layers = <3>;
            bindings = <&bt BT_CLR>;
        };
        combo_bt_clr_all {
            timeout-ms = <50>;
            key-positions = <11 12>;
            layers = <3>;
            bindings = <&bt BT_CLR_ALL>;
        };
        combo_pp {
            timeout-ms = <50>;
            key-positions = <15 16>;
            layers = <3>;
            bindings = <&kp C_PP>;
        };
        combo_mute {
            timeout-ms = <50>;
            key-positions = <16 17>;
            layers = <3>;
            bindings = <&kp C_MUTE>;
        };
    };
    behaviors {
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };
        mo_to: behavior_mo_to {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&to>;
        };
        
        mo_to_right: behavior_mo_to_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            bindings = <&to>, <&to>;
        };
        
        mt: mod_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <500>;
            bindings = <&kp>, <&kp>;
            display-name = "Mod-Tap";
        };
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            //hold-trigger-key-positions = < ... >; // List of keys on the right side of the keyboard
            hold-trigger-on-release;
            retro-tap;
        };
        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            //hold-trigger-key-positions = < ... >; // List of keys on the left side of the keyboard
            hold-trigger-on-release;
            retro-tap;
        };
        td_caps_print: td_caps_print {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Double Tap Dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp CAPS>, <&kp PSCRN>;
        };
        td_alttab_print: td_alttab_print {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Double Tap Dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp LA(TAB)>, <&kp PSCRN>;
        };
        td_quote: td_quote {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Double Tap Dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp SQT>, <&kp DQT>;
        };
        td_comma: td_comma {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Double Tap Dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&lt 5 COMMA>, <&kp SEMI>;
        };
        td_dot: td_dot {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Double Tap Dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp DOT>, <&kp COLON>;
        };
        td_lpar: td_lpar {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Double Tap Dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp LPAR>, <&kp LBRC>;
        };
        td_rpar: td_rpar {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Double Tap Dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp RPAR>, <&kp RBRC>;
        };
        td_lbkt: td_lbkt {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Double Tap Dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp LBKT>, <&kp LBRC>;
        };
        td_rbkt: td_rbkt {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Double Tap Dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp RBKT>, <&kp RBRC>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        nav_layer {
            display-name = "NAV";
            bindings = <
&lt 5 ESC    &td_alttab_print  &kp LC(Y)         &kp LC(S)        &kp LC(Z)         &kp FSLH                              &mmv MOVE_UP                 &td_quote &kp N7         &kp N8         &kp N9         &kp KP_PLUS         &kp LA(F4)
&lt 3 LC(A)  &hml LGUI LEFT    &hml LALT DOWN    &hml LSHFT UP    &hml LCTRL RIGHT  &td_comma              &mmv MOVE_LEFT  &mkp LCLK  &mmv MOVE_RIGHT  &td_dot   &hmr RCTRL N1  &hmr RSHFT N2  &hmr LALT N3   &hmr RGUI N0         &kp KP_EQUAL
&kp LGUI     &hml LCTRL LC(X)  &hml LSHFT LC(V)  &hml LALT LC(F)  &hml LGUI LC(C)   &td_lpar  &kp C_MUTE                  &mmv MOVE_DOWN               &td_rpar  &hmr RGUI N4   &hmr LALT N5   &hmr RSHFT N6  &hmr RCTRL KP_MINUS  &kp DEL
                                                &lt 2 TAB  MO_TO(1, 0)  &lt 4 SPACE                                                                      &lt 2 ENTER  &mo_to_right 0 1   &lt 4 BSPC
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        alpha_layer {
            display-name = "ABC";
            bindings = <
&trans       &td_caps_print  &kp Y         &kp U          &kp Z         &trans                          &kp UP                &trans  &kp H         &kp D         &kp G         &kp Q         &kp J
&lt 3 W      &hml LGUI A     &hml LALT E   &hml LSHFT I   &hml LCTRL O  &trans               &kp LEFT  &kp ENTER  &kp RIGHT   &trans  &hmr RCTRL R  &hmr RSHFT S  &hmr LALT T   &hmr RGUI N   &kp P
&kp K_CMENU  &hml LCTRL X    &hml LSHFT V  &hml LALT F    &hml LGUI C   &trans  &kp SPACE               &kp DOWN              &trans  &hmr RGUI L   &hmr LALT K   &hmr RSHFT M  &hmr RCTRL B  &trans
                                        &trans           &trans           &trans                                                                         &trans           &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };


        symbol_layer {
            display-name = "SYMBOL";
            bindings = <
&trans     &kp HASH          &kp LT           &kp GT           &kp DOLLAR        &kp BSLH                           &mmv MOVE_UP                  &trans    &kp DQT          &kp QMARK         &kp AT_SIGN      &kp CARET         &none
&kp CARET  &hml LGUI UNDER   &hml LALT MINUS  &hml LSHFT PLUS  &hml LCTRL EQUAL  &trans         &mmv MOVE_LEFT  &mkp LCLK  &mmv MOVE_RIGHT        &kp EXCL  &hmr RCTRL SEMI  &hmr RSHFT COMMA  &hmr LALT DOT    &hmr RGUI COLON   &kp PERCENT
&trans     &hml LCTRL QMARK  &hml LSHFT FSLH  &hml LALT ASTRK  &hml LGUI LBRC    &td_lbkt   &kp C_MUTE              &mmv MOVE_DOWN                &td_rbkt  &hmr RGUI RBRC   &hmr LALT AMPS    &hmr RSHFT PIPE  &hmr RCTRL TILDE  &trans
                                             &trans     &trans  &trans                                                                            &trans     &trans    &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        media_layer {
            display-name = "MEDIA";
            bindings = <
&trans        &rgb_ug RGB_TOG                &rgb_ug RGB_BRI  &kp C_BRI_UP    &kp C_VOLUME_UP           &bt BT_SEL 0                                &mmv MOVE_UP                     &bl BL_INC  &none            &rgb_ug RGB_EFF   &none            &none          &none
&bt BT_SEL 4  &hml LCTRL C_PREV              &hml LSHFT C_RW  &hml LALT C_FF  &hml LGUI C_NEXT          &bt BT_SEL 1                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &bl BL_TOG  &hmr RCTRL HOME  &hmr RSHFT PG_UP  &hmr LALT PG_DN  &hmr RGUI END  &none
&bt BT_SEL 3  &rgb_ug RGB_COLOR_HSB(0,0,10)  &rgb_ug RGB_BRD  &kp C_BRI_DN    &kp C_VOLUME_DOWN  &bt BT_SEL 2 &kp C_MUTE                     &mmv MOVE_DOWN                          &bl BL_DEC  &hmr RGUI INS    &rgb_ug RGB_EFR   &kp RSHFT        &kp RCTRL      &trans
                                          &trans        &trans             &trans                                                                             &trans &trans &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        mouse_layer {
            display-name = "MOUSE";
            bindings = <
&studio_unlock  &kp F2          &kp F3          &kp F4        &kp F5           &kp F6                               &mmv MOVE_UP                     &none  &mkp LCLK       &mkp MCLK       &mkp RCLK       &none            &sys_reset
&kp F1          &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &kp F7               &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &none  &mmv MOVE_LEFT  &mmv MOVE_UP    &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none
&bootloader     &kp F9          &kp F10         &kp F11       &kp F12          &kp F8  &kp C_MUTE                   &mmv MOVE_DOWN                   &none  &msc SCRL_LEFT  &msc SCRL_UP    &msc SCRL_DOWN  &msc SCRL_RIGHT  &bootloader        
                                                &trans          &trans           &trans                                                                &trans &trans &kp DEL
            >;

            sensor-bindings = <&scroll_encoder>;
        };
        
          numpad_layer {
            display-name = "NUMPAD";
            bindings = <
&trans    &kp HASH          &kp LT           &kp GT           &kp AMPS          &kp PERCENT                        &mmv MOVE_UP                  &trans    &kp KP_N7         &kp KP_N8         &kp KP_N9         &kp DQT           &none
&kp EXCL  &hml LGUI UNDER   &hml LALT MINUS  &hml LSHFT PLUS  &hml LCTRL EQUAL  &kp DOLLAR         &mmv MOVE_LEFT  &mkp LCLK  &mmv MOVE_RIGHT    &trans    &hmr RCTRL KP_N1  &hmr RSHFT KP_N2  &hmr LALT KP_N3   &hmr RGUI KP_N0   &kp CARET
&trans    &hml LCTRL QMARK  &hml LSHFT FSLH  &hml LALT ASTRK  &hml LGUI PIPE    &td_lbkt   &kp C_MUTE              &mmv MOVE_DOWN                &td_rbkt  &hmr RGUI KP_N4   &hmr LALT KP_N5   &hmr RSHFT KP_N6  &hmr RCTRL TILDE  &trans
                              &trans     &trans  &trans                                                                    &trans     &trans    &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };
    };
};
